<?php

/**
 * BasesfOauthServerAccessToken
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $token
 * @property string $secret
 * @property integer $consumer_id
 * @property integer $user_id
 * @property string $scope
 * @property integer $expires
 * @property integer $protocole
 * @property sfGuardUser $User
 * @property sfOauthServerConsumer $Consumer
 * 
 * @method string                   getToken()       Returns the current record's "token" value
 * @method string                   getSecret()      Returns the current record's "secret" value
 * @method integer                  getConsumerId()  Returns the current record's "consumer_id" value
 * @method integer                  getUserId()      Returns the current record's "user_id" value
 * @method string                   getScope()       Returns the current record's "scope" value
 * @method integer                  getExpires()     Returns the current record's "expires" value
 * @method integer                  getProtocole()   Returns the current record's "protocole" value
 * @method sfGuardUser              getUser()        Returns the current record's "User" value
 * @method sfOauthServerConsumer    getConsumer()    Returns the current record's "Consumer" value
 * @method sfOauthServerAccessToken setToken()       Sets the current record's "token" value
 * @method sfOauthServerAccessToken setSecret()      Sets the current record's "secret" value
 * @method sfOauthServerAccessToken setConsumerId()  Sets the current record's "consumer_id" value
 * @method sfOauthServerAccessToken setUserId()      Sets the current record's "user_id" value
 * @method sfOauthServerAccessToken setScope()       Sets the current record's "scope" value
 * @method sfOauthServerAccessToken setExpires()     Sets the current record's "expires" value
 * @method sfOauthServerAccessToken setProtocole()   Sets the current record's "protocole" value
 * @method sfOauthServerAccessToken setUser()        Sets the current record's "User" value
 * @method sfOauthServerAccessToken setConsumer()    Sets the current record's "Consumer" value
 * 
 * @package    ttupf
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfOauthServerAccessToken extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_oauth_server_access_token');
        $this->hasColumn('token', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 40,
             ));
        $this->hasColumn('secret', 'string', 40, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 40,
             ));
        $this->hasColumn('consumer_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('scope', 'string', 256, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 256,
             ));
        $this->hasColumn('expires', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('protocole', 'integer', null, array(
             'type' => 'integer',
             'default' => 1,
             ));

        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasOne('sfOauthServerConsumer as Consumer', array(
             'local' => 'consumer_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}